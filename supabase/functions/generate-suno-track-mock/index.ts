import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Mock Edge Function –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã Suno AI (–∫–æ–≥–¥–∞ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const authHeader = req.headers.get('Authorization') ?? '';
  const token = authHeader.replace('Bearer ', '');
  const jwtPayload = token.split('.')[1];
  const userId = jwtPayload ? JSON.parse(atob(jwtPayload)).sub as string : 'anonymous';

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? ''
    );

    let requestBody;
    try {
      requestBody = await req.json();
    } catch (parseError) {
      console.error('Failed to parse request body:', parseError);
      throw new Error('Invalid JSON in request body');
    }

    const { 
      prompt,
      style = "",
      title = "",
      tags = "energetic, creative, viral",
      make_instrumental = false,
      model = "chirp-v3-5",
      trackId = null,
      projectId = null,
      artistId = null
    } = requestBody;

    if (!prompt || prompt.trim().length === 0) {
      throw new Error('Prompt is required and cannot be empty');
    }

    console.log('üé≠ MOCK: Generating Suno track with params:', { 
      prompt: prompt.substring(0, 100) + '...', 
      style, 
      title,
      model,
      make_instrumental
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ SunoAPI –∏ —Å–æ–∑–¥–∞–Ω–∏–µ task ID
    const mockTaskId = `mock_task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    console.log('üé≠ MOCK: Generated task ID:', mockTaskId);

    // –°–æ–∑–¥–∞–µ–º mock response –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const generatedTrack = {
      id: mockTaskId,
      title: title || `AI Generated ${new Date().toLocaleDateString('ru-RU')}`,
      status: 'processing',
      metadata: {
        task_id: mockTaskId,
        model: model.replace('chirp-v', 'V').replace('-', '_'),
        custom_mode: true,
        mock: true
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let trackRecord = null;
    let generationRecord = null;

    const { data: generation, error: genError } = await supabase
      .from('ai_generations')
      .insert({
        user_id: userId,
        prompt,
        service: 'suno',
        status: 'processing',
        result_url: null,
        metadata: {
          suno_task_id: mockTaskId,
          suno_id: generatedTrack.id,
          model: model.replace('chirp-v', 'V').replace('-', '_'),
          style: style,
          custom_mode: true,
          make_instrumental,
          title: generatedTrack.title,
          mock_generation: true,
          mock_callback_scheduled: true
        },
        track_id: trackId
      })
      .select()
      .single();

    if (genError) {
      console.error('Error saving generation:', genError);
    } else {
      generationRecord = generation;
      console.log('üé≠ MOCK: Generation saved:', generation.id);
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º mock callback —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(async () => {
      console.log('üé≠ MOCK: Executing scheduled callback for task:', mockTaskId);
      
      try {
        const callbackData = {
          code: 200,
          msg: "success",
          data: {
            callbackType: "complete",
            task_id: mockTaskId,
            data: [{
              id: `mock_suno_${Date.now()}`,
              audio_url: "https://commondatastorage.googleapis.com/codeskulptor-demos/DDR_assets/Kangaroo_MusiQue_-_The_Neverwritten_Role_Playing_Game.mp3", // –¢–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
              title: generatedTrack.title,
              duration: 120 + Math.floor(Math.random() * 180), // 2-5 –º–∏–Ω—É—Ç
              model_name: "V3_5",
              createTime: new Date().toISOString(),
              lyric: prompt + "\n\n[Generated by Mock Suno AI]",
              style: style || "Pop, Electronic",
              tags: tags,
              prompt: prompt
            }]
          }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback –Ω–∞ –Ω–∞—à endpoint
        const callbackUrl = `${Deno.env.get('SUPABASE_URL')}/functions/v1/suno-callback`;
        
        const callbackResponse = await fetch(callbackUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(callbackData),
        });

        console.log('üé≠ MOCK: Callback sent, status:', callbackResponse.status);
        const callbackResponseText = await callbackResponse.text();
        console.log('üé≠ MOCK: Callback response:', callbackResponseText);
        
      } catch (callbackError) {
        console.error('üé≠ MOCK: Callback error:', callbackError);
      }
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å task ID –¥–ª—è polling
    return new Response(JSON.stringify({
      success: true,
      data: {
        suno: generatedTrack,
        track: trackRecord,
        generation: generationRecord,
        task_id: mockTaskId,
        status: 'processing',
        title: generatedTrack.title,
        message: `MOCK: Track generation started. Use task ID ${mockTaskId} to check status. Callback in 10 seconds.`,
        mock: true
      },
      metadata: {
        service: 'suno',
        model: model.replace('chirp-v', 'V').replace('-', '_'),
        custom_mode: true,
        generatedAt: new Date().toISOString(),
        processingType: 'mock_async_with_task_id',
        callbackScheduled: '10_seconds'
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('üé≠ MOCK: Error in generate-suno-track-mock function:', error);
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message,
      service: 'suno',
      mock: true,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});