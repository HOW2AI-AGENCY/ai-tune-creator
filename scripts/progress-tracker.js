#!/usr/bin/env node

/**
 * Progress Tracker for AI Music Platform Optimization
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ OPTIMIZATION_ROADMAP.md
 * 
 * Usage:
 * node scripts/progress-tracker.js [command]
 * 
 * Commands:
 * - status: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
 * - update [task-id] [status]: –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
 * - report: –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
 * - metrics: –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
 */

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const ROADMAP_PATH = path.join(__dirname, '..', 'OPTIMIZATION_ROADMAP.md');
const REPORT_PATH = path.join(__dirname, '..', 'PROGRESS_REPORT.md');
const METRICS_PATH = path.join(__dirname, '..', 'metrics.json');

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
const TaskStatus = {
  TODO: '‚è≥ TODO',
  IN_PROGRESS: 'üöß IN PROGRESS',
  COMPLETED: '‚úÖ COMPLETED',
  BLOCKED: '‚ùå BLOCKED'
};

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
const Priority = {
  CRITICAL: 'üî¥ CRITICAL',
  HIGH: 'üü† HIGH',
  MEDIUM: 'üü° MEDIUM',
  LOW: 'üü¢ LOW'
};

class ProgressTracker {
  constructor() {
    this.tasks = [];
    this.phases = [];
    this.metrics = {};
    this.loadRoadmap();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ OPTIMIZATION_ROADMAP.md
   */
  loadRoadmap() {
    try {
      const content = fs.readFileSync(ROADMAP_PATH, 'utf8');
      this.parseRoadmap(content);
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ roadmap:'), error.message);
      process.exit(1);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ markdown —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏
   */
  parseRoadmap(content) {
    const lines = content.split('\n');
    let currentPhase = null;
    let inTaskTable = false;

    for (const line of lines) {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã
      if (line.startsWith('### PHASE')) {
        const phaseMatch = line.match(/PHASE (\d+): (.+)/);
        if (phaseMatch) {
          currentPhase = {
            number: parseInt(phaseMatch[1]),
            name: phaseMatch[2],
            tasks: []
          };
          this.phases.push(currentPhase);
        }
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–¥–∞—á–∞–º–∏
      if (line.includes('| ID | –ó–∞–¥–∞—á–∞ |')) {
        inTaskTable = true;
        continue;
      }

      if (inTaskTable && line.startsWith('|') && !line.includes('----')) {
        const parts = line.split('|').map(p => p.trim()).filter(p => p);
        if (parts.length >= 6) {
          const task = {
            id: parts[0].replace(/\*\*/g, ''),
            name: parts[1],
            priority: parts[2],
            dependencies: parts[3] === '-' ? [] : parts[3].split(',').map(d => d.trim()),
            time: parts[4],
            status: parts[5]
          };

          this.tasks.push(task);
          if (currentPhase) {
            currentPhase.tasks.push(task);
          }
        }
      }

      if (inTaskTable && !line.startsWith('|')) {
        inTaskTable = false;
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
   */
  showStatus() {
    console.log(chalk.cyan('\nüìä === –°–¢–ê–¢–£–° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò AI MUSIC PLATFORM ===\n'));

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = this.calculateStats();
    console.log(chalk.white('üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:'));
    console.log(`  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${chalk.yellow(stats.total)}`);
    console.log(`  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${chalk.green(stats.completed)} (${stats.completedPercent}%)`);
    console.log(`  –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${chalk.blue(stats.inProgress)}`);
    console.log(`  –û–∂–∏–¥–∞–µ—Ç: ${chalk.gray(stats.todo)}`);
    console.log(`  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${chalk.red(stats.blocked)}\n`);

    // –°—Ç–∞—Ç—É—Å –ø–æ —Ñ–∞–∑–∞–º
    console.log(chalk.white('üìã –°—Ç–∞—Ç—É—Å –ø–æ —Ñ–∞–∑–∞–º:'));
    for (const phase of this.phases) {
      const phaseStats = this.calculatePhaseStats(phase);
      const progress = this.createProgressBar(phaseStats.completedPercent);
      console.log(`\n  ${chalk.bold(`PHASE ${phase.number}`)}: ${phase.name}`);
      console.log(`  ${progress} ${phaseStats.completedPercent}%`);
      console.log(`  –ó–∞–¥–∞—á: ${phaseStats.completed}/${phaseStats.total}`);
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    const criticalTasks = this.tasks.filter(t => 
      t.priority.includes('CRITICAL') && t.status !== TaskStatus.COMPLETED
    );

    if (criticalTasks.length > 0) {
      console.log(chalk.red('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:'));
      for (const task of criticalTasks) {
        console.log(`  ${task.id}: ${task.name} - ${task.status}`);
      }
    }

    // –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ
    const inProgressTasks = this.tasks.filter(t => t.status === TaskStatus.IN_PROGRESS);
    if (inProgressTasks.length > 0) {
      console.log(chalk.blue('\nüöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ:'));
      for (const task of inProgressTasks) {
        console.log(`  ${task.id}: ${task.name}`);
      }
    }

    // –°–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–∞–¥–∞—á–∏
    const nextTasks = this.getNextRecommendedTasks();
    if (nextTasks.length > 0) {
      console.log(chalk.green('\n‚û°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:'));
      for (const task of nextTasks) {
        console.log(`  ${task.id}: ${task.name} (${task.priority})`);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
   */
  updateTaskStatus(taskId, newStatus) {
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) {
      console.error(chalk.red(`‚ùå –ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`));
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (newStatus === TaskStatus.IN_PROGRESS || newStatus === TaskStatus.COMPLETED) {
      const blockedDeps = this.checkDependencies(task);
      if (blockedDeps.length > 0) {
        console.error(chalk.red('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:'));
        blockedDeps.forEach(dep => console.log(`  - ${dep}`));
        return false;
      }
    }

    const oldStatus = task.status;
    task.status = newStatus;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ roadmap
    this.updateRoadmapFile(taskId, newStatus);

    console.log(chalk.green(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω:`));
    console.log(`  ${oldStatus} ‚Üí ${newStatus}`);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Ç—Ä–∏–∫–∏
    this.logMetric('task_updated', {
      taskId,
      oldStatus,
      newStatus,
      timestamp: new Date().toISOString()
    });

    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–¥–∞—á–∏
   */
  checkDependencies(task) {
    const blockedDeps = [];
    for (const depId of task.dependencies) {
      const dep = this.tasks.find(t => t.id === depId);
      if (dep && dep.status !== TaskStatus.COMPLETED) {
        blockedDeps.push(`${depId} (${dep.status})`);
      }
    }
    return blockedDeps;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
   */
  getNextRecommendedTasks() {
    const available = this.tasks.filter(task => {
      // –¢–æ–ª—å–∫–æ TODO –∑–∞–¥–∞—á–∏
      if (task.status !== TaskStatus.TODO) return false;
      
      // –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
      const blockedDeps = this.checkDependencies(task);
      if (blockedDeps.length > 0) return false;
      
      return true;
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const priorityOrder = {
      [Priority.CRITICAL]: 0,
      [Priority.HIGH]: 1,
      [Priority.MEDIUM]: 2,
      [Priority.LOW]: 3
    };

    available.sort((a, b) => {
      const aPriority = priorityOrder[a.priority] || 999;
      const bPriority = priorityOrder[b.priority] || 999;
      return aPriority - bPriority;
    });

    return available.slice(0, 5);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  calculateStats() {
    const total = this.tasks.length;
    const completed = this.tasks.filter(t => t.status === TaskStatus.COMPLETED).length;
    const inProgress = this.tasks.filter(t => t.status === TaskStatus.IN_PROGRESS).length;
    const todo = this.tasks.filter(t => t.status === TaskStatus.TODO).length;
    const blocked = this.tasks.filter(t => t.status === TaskStatus.BLOCKED).length;

    return {
      total,
      completed,
      inProgress,
      todo,
      blocked,
      completedPercent: Math.round((completed / total) * 100)
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–∞–∑–µ
   */
  calculatePhaseStats(phase) {
    const total = phase.tasks.length;
    const completed = phase.tasks.filter(t => t.status === TaskStatus.COMPLETED).length;

    return {
      total,
      completed,
      completedPercent: total > 0 ? Math.round((completed / total) * 100) : 0
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ progress bar
   */
  createProgressBar(percent) {
    const width = 30;
    const filled = Math.round((percent / 100) * width);
    const empty = width - filled;
    
    const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    
    if (percent === 100) return chalk.green(`[${bar}]`);
    if (percent >= 75) return chalk.yellow(`[${bar}]`);
    if (percent >= 50) return chalk.blue(`[${bar}]`);
    return chalk.gray(`[${bar}]`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  generateReport() {
    const stats = this.calculateStats();
    const timestamp = new Date().toISOString();

    const report = `# üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** ${timestamp}
**–ü—Ä–æ–µ–∫—Ç:** AI Music Platform

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –∑–∞–¥–∞—á:** ${stats.total}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** ${stats.completed} (${stats.completedPercent}%)
- **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** ${stats.inProgress}
- **–û–∂–∏–¥–∞–µ—Ç:** ${stats.todo}
- **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:** ${stats.blocked}

## –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ñ–∞–∑–∞–º

${this.phases.map(phase => {
  const phaseStats = this.calculatePhaseStats(phase);
  return `### PHASE ${phase.number}: ${phase.name}
- –ü—Ä–æ–≥—Ä–µ—Å—Å: ${phaseStats.completed}/${phaseStats.total} (${phaseStats.completedPercent}%)
- –°—Ç–∞—Ç—É—Å: ${phaseStats.completedPercent === 100 ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' : 'üöß –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}`;
}).join('\n\n')}

## –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏

${this.tasks
  .filter(t => t.priority.includes('CRITICAL'))
  .map(t => `- **${t.id}**: ${t.name} - ${t.status}`)
  .join('\n')}

## –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

- **ESLint —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** ${this.checkESLintStatus()}
- **TypeScript strict:** ${this.checkTypeScriptStrict()}
- **–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:** ${this.getTestCoverage()}%
- **Bundle size:** ${this.getBundleSize()}
- **–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** ${this.getSecurityVulnerabilities()}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${this.generateRecommendations()}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*
`;

    fs.writeFileSync(REPORT_PATH, report);
    console.log(chalk.green(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${REPORT_PATH}`));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ESLint
   */
  checkESLintStatus() {
    const eslintTask = this.tasks.find(t => t.id === 'SEC-001');
    return eslintTask && eslintTask.status === TaskStatus.COMPLETED ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –°–ª–æ–º–∞–Ω';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript strict mode
   */
  checkTypeScriptStrict() {
    const tsTask = this.tasks.find(t => t.id === 'TS-002');
    return tsTask && tsTask.status === TaskStatus.COMPLETED ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è (mock)
   */
  getTestCoverage() {
    const testTask = this.tasks.find(t => t.id === 'TEST-003');
    return testTask && testTask.status === TaskStatus.COMPLETED ? 80 : 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ bundle (mock)
   */
  getBundleSize() {
    const perfTask = this.tasks.find(t => t.id === 'PERF-002');
    return perfTask && perfTask.status === TaskStatus.COMPLETED ? '1.2MB' : '2MB';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
   */
  getSecurityVulnerabilities() {
    const secTask = this.tasks.find(t => t.id === 'SEC-003');
    return secTask && secTask.status === TaskStatus.COMPLETED ? 0 : 3;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations() {
    const recommendations = [];
    
    const criticalIncomplete = this.tasks.filter(t => 
      t.priority.includes('CRITICAL') && t.status !== TaskStatus.COMPLETED
    );

    if (criticalIncomplete.length > 0) {
      recommendations.push(`1. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:** ${criticalIncomplete.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è`);
    }

    const blockedTasks = this.tasks.filter(t => t.status === TaskStatus.BLOCKED);
    if (blockedTasks.length > 0) {
      recommendations.push(`2. **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏:** ${blockedTasks.length} –∑–∞–¥–∞—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ç—Ä–µ–±—É—é—Ç —Ä–µ—à–µ–Ω–∏—è`);
    }

    if (this.getTestCoverage() < 60) {
      recommendations.push('3. **–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:** –¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞');
    }

    return recommendations.length > 0 ? recommendations.join('\n') : '–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ roadmap
   */
  updateRoadmapFile(taskId, newStatus) {
    try {
      let content = fs.readFileSync(ROADMAP_PATH, 'utf8');
      
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–¥–∞—á–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const lines = content.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes(`| **${taskId}**`) || lines[i].includes(`| ${taskId} |`)) {
          const parts = lines[i].split('|');
          if (parts.length >= 6) {
            parts[5] = ` ${newStatus} `;
            lines[i] = parts.join('|');
          }
        }
      }

      content = lines.join('\n');
      fs.writeFileSync(ROADMAP_PATH, content);
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è roadmap —Ñ–∞–π–ª–∞:'), error.message);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
   */
  logMetric(event, data) {
    try {
      let metrics = {};
      if (fs.existsSync(METRICS_PATH)) {
        metrics = JSON.parse(fs.readFileSync(METRICS_PATH, 'utf8'));
      }

      if (!metrics.events) metrics.events = [];
      metrics.events.push({
        event,
        data,
        timestamp: new Date().toISOString()
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
      const stats = this.calculateStats();
      metrics.summary = stats;
      metrics.lastUpdated = new Date().toISOString();

      fs.writeFileSync(METRICS_PATH, JSON.stringify(metrics, null, 2));
    } catch (error) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫:'), error.message);
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
   */
  showMetrics() {
    console.log(chalk.cyan('\nüìà === –ú–ï–¢–†–ò–ö–ò –ü–†–û–ï–ö–¢–ê ===\n'));

    const stats = this.calculateStats();
    
    // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    console.log(chalk.white('–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:'));
    const progressBar = this.createProgressBar(stats.completedPercent);
    console.log(`${progressBar} ${stats.completedPercent}%\n`);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    console.log(chalk.white('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:'));
    const priorities = {
      [Priority.CRITICAL]: 0,
      [Priority.HIGH]: 0,
      [Priority.MEDIUM]: 0,
      [Priority.LOW]: 0
    };

    this.tasks.forEach(task => {
      if (priorities[task.priority] !== undefined) {
        priorities[task.priority]++;
      }
    });

    Object.entries(priorities).forEach(([priority, count]) => {
      const completed = this.tasks.filter(t => 
        t.priority === priority && t.status === TaskStatus.COMPLETED
      ).length;
      const percent = count > 0 ? Math.round((completed / count) * 100) : 0;
      console.log(`  ${priority}: ${completed}/${count} (${percent}%)`);
    });

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    console.log(chalk.white('\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:'));
    const totalHours = this.tasks.reduce((sum, task) => {
      const hours = parseInt(task.time) || 0;
      return sum + hours;
    }, 0);

    const completedHours = this.tasks
      .filter(t => t.status === TaskStatus.COMPLETED)
      .reduce((sum, task) => {
        const hours = parseInt(task.time) || 0;
        return sum + hours;
      }, 0);

    console.log(`  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalHours}h`);
    console.log(`  –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedHours}h`);
    console.log(`  –û—Å—Ç–∞–ª–æ—Å—å: ${totalHours - completedHours}h`);

    // –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (completedHours > 0 && stats.completed > 0) {
      const avgHoursPerTask = completedHours / stats.completed;
      const remainingTasks = stats.total - stats.completed;
      const estimatedHours = Math.round(remainingTasks * avgHoursPerTask);
      const estimatedDays = Math.ceil(estimatedHours / 8); // 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å

      console.log(chalk.yellow(`\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ~${estimatedDays} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π`));
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function main() {
  const tracker = new ProgressTracker();
  const command = process.argv[2];
  const args = process.argv.slice(3);

  switch (command) {
    case 'status':
      tracker.showStatus();
      break;

    case 'update':
      if (args.length !== 2) {
        console.error(chalk.red('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: update [task-id] [status]'));
        console.error('–°—Ç–∞—Ç—É—Å—ã: TODO, IN_PROGRESS, COMPLETED, BLOCKED');
        process.exit(1);
      }
      tracker.updateTaskStatus(args[0], args[1]);
      break;

    case 'report':
      tracker.generateReport();
      break;

    case 'metrics':
      tracker.showMetrics();
      break;

    default:
      console.log(chalk.cyan('AI Music Platform - Progress Tracker\n'));
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  status         - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å');
      console.log('  update ID STATUS - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
      console.log('  report         - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç');
      console.log('  metrics        - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏');
      console.log('\n–ü—Ä–∏–º–µ—Ä:');
      console.log('  node scripts/progress-tracker.js status');
      console.log('  node scripts/progress-tracker.js update SEC-001 "‚úÖ COMPLETED"');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chalk
try {
  require.resolve('chalk');
} catch (e) {
  console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  require('child_process').execSync('npm install chalk', { stdio: 'inherit' });
}

main();