import * as React from 'react';
import { cn } from '@/lib/utils';
import { useMediaQuery, useIsMobile, usePrefersReducedMotion } from '@/hooks/useMediaQuery';
import { KeyboardNavigationProvider, SkipLink } from './keyboard-navigation';
import { Toaster } from '@/components/ui/toaster';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Button } from '@/components/ui/button';
import { \n  Accessibility, \n  Sun, \n  Moon, \n  Volume2, \n  VolumeX, \n  Maximize2, \n  Minimize2,\n  Settings,\n  HelpCircle\n} from 'lucide-react';\n\ninterface EnhancedLayoutProps {\n  children: React.ReactNode;\n  className?: string;\n  /**\n   * Enable accessibility features\n   */\n  enableA11y?: boolean;\n  /**\n   * Enable mobile optimizations\n   */\n  enableMobile?: boolean;\n  /**\n   * Enable keyboard navigation\n   */\n  enableKeyboardNav?: boolean;\n  /**\n   * Main content area ID for skip links\n   */\n  mainContentId?: string;\n}\n\ninterface AccessibilitySettings {\n  highContrast: boolean;\n  reducedMotion: boolean;\n  largeText: boolean;\n  soundEnabled: boolean;\n  focusIndicators: boolean;\n}\n\nconst defaultA11ySettings: AccessibilitySettings = {\n  highContrast: false,\n  reducedMotion: false,\n  largeText: false,\n  soundEnabled: true,\n  focusIndicators: true\n};\n\n/**\n * Enhanced layout component with comprehensive accessibility and UX features\n */\nexport const EnhancedLayout = React.forwardRef<HTMLDivElement, EnhancedLayoutProps>(\n  ({ \n    children, \n    className,\n    enableA11y = true,\n    enableMobile = true,\n    enableKeyboardNav = true,\n    mainContentId = 'main-content',\n    ...props \n  }, ref) => {\n    const isMobile = useIsMobile();\n    const prefersReducedMotion = usePrefersReducedMotion();\n    const [a11ySettings, setA11ySettings] = React.useState<AccessibilitySettings>(() => {\n      if (typeof window === 'undefined') return defaultA11ySettings;\n      \n      const saved = localStorage.getItem('a11y-settings');\n      return saved ? { ...defaultA11ySettings, ...JSON.parse(saved) } : defaultA11ySettings;\n    });\n    const [showA11yPanel, setShowA11yPanel] = React.useState(false);\n    const [isFullscreen, setIsFullscreen] = React.useState(false);\n    \n    // Save accessibility settings to localStorage\n    React.useEffect(() => {\n      localStorage.setItem('a11y-settings', JSON.stringify(a11ySettings));\n    }, [a11ySettings]);\n    \n    // Apply accessibility settings to document\n    React.useEffect(() => {\n      const root = document.documentElement;\n      \n      // High contrast mode\n      root.classList.toggle('high-contrast', a11ySettings.highContrast);\n      \n      // Large text mode\n      root.classList.toggle('large-text', a11ySettings.largeText);\n      \n      // Reduced motion\n      if (a11ySettings.reducedMotion || prefersReducedMotion) {\n        root.style.setProperty('--motion-duration', '0s');\n        root.classList.add('reduce-motion');\n      } else {\n        root.style.removeProperty('--motion-duration');\n        root.classList.remove('reduce-motion');\n      }\n      \n      // Enhanced focus indicators\n      root.classList.toggle('enhanced-focus', a11ySettings.focusIndicators);\n      \n    }, [a11ySettings, prefersReducedMotion]);\n    \n    // Keyboard shortcuts\n    React.useEffect(() => {\n      const handleKeyDown = (e: KeyboardEvent) => {\n        // Skip to main content (Alt + 1)\n        if (e.altKey && e.key === '1') {\n          e.preventDefault();\n          const mainContent = document.getElementById(mainContentId);\n          mainContent?.focus();\n        }\n        \n        // Toggle accessibility panel (Alt + A)\n        if (e.altKey && e.key.toLowerCase() === 'a') {\n          e.preventDefault();\n          setShowA11yPanel(prev => !prev);\n        }\n        \n        // Toggle high contrast (Alt + C)\n        if (e.altKey && e.key.toLowerCase() === 'c') {\n          e.preventDefault();\n          setA11ySettings(prev => ({ ...prev, highContrast: !prev.highContrast }));\n        }\n        \n        // Toggle large text (Alt + T)\n        if (e.altKey && e.key.toLowerCase() === 't') {\n          e.preventDefault();\n          setA11ySettings(prev => ({ ...prev, largeText: !prev.largeText }));\n        }\n        \n        // Fullscreen toggle (F11 alternative: Alt + F)\n        if (e.altKey && e.key.toLowerCase() === 'f') {\n          e.preventDefault();\n          toggleFullscreen();\n        }\n      };\n      \n      window.addEventListener('keydown', handleKeyDown);\n      return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [mainContentId]);\n    \n    const toggleFullscreen = async () => {\n      try {\n        if (!document.fullscreenElement) {\n          await document.documentElement.requestFullscreen();\n          setIsFullscreen(true);\n        } else {\n          await document.exitFullscreen();\n          setIsFullscreen(false);\n        }\n      } catch (error) {\n        console.error('Fullscreen toggle failed:', error);\n      }\n    };\n    \n    const AccessibilityPanel = () => (\n      <div className=\"fixed top-4 right-4 z-50 bg-background border rounded-lg shadow-lg p-4 min-w-64\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold text-sm\">Accessibility Settings</h3>\n            <Button \n              size=\"sm\" \n              variant=\"ghost\" \n              onClick={() => setShowA11yPanel(false)}\n              aria-label=\"Close accessibility panel\"\n            >\n              Ã—\n            </Button>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <label className=\"flex items-center justify-between text-sm\">\n              <span>High Contrast</span>\n              <input \n                type=\"checkbox\"\n                checked={a11ySettings.highContrast}\n                onChange={(e) => setA11ySettings(prev => ({ ...prev, highContrast: e.target.checked }))}\n                className=\"rounded\"\n              />\n            </label>\n            \n            <label className=\"flex items-center justify-between text-sm\">\n              <span>Large Text</span>\n              <input \n                type=\"checkbox\"\n                checked={a11ySettings.largeText}\n                onChange={(e) => setA11ySettings(prev => ({ ...prev, largeText: e.target.checked }))}\n                className=\"rounded\"\n              />\n            </label>\n            \n            <label className=\"flex items-center justify-between text-sm\">\n              <span>Reduce Motion</span>\n              <input \n                type=\"checkbox\"\n                checked={a11ySettings.reducedMotion}\n                onChange={(e) => setA11ySettings(prev => ({ ...prev, reducedMotion: e.target.checked }))}\n                className=\"rounded\"\n              />\n            </label>\n            \n            <label className=\"flex items-center justify-between text-sm\">\n              <span>Enhanced Focus</span>\n              <input \n                type=\"checkbox\"\n                checked={a11ySettings.focusIndicators}\n                onChange={(e) => setA11ySettings(prev => ({ ...prev, focusIndicators: e.target.checked }))}\n                className=\"rounded\"\n              />\n            </label>\n            \n            <label className=\"flex items-center justify-between text-sm\">\n              <span>Sound Effects</span>\n              <input \n                type=\"checkbox\"\n                checked={a11ySettings.soundEnabled}\n                onChange={(e) => setA11ySettings(prev => ({ ...prev, soundEnabled: e.target.checked }))}\n                className=\"rounded\"\n              />\n            </label>\n          </div>\n          \n          <div className=\"pt-2 border-t text-xs text-muted-foreground\">\n            <p>Keyboard shortcuts:</p>\n            <ul className=\"space-y-1 mt-1\">\n              <li>Alt + 1: Skip to main content</li>\n              <li>Alt + A: Toggle this panel</li>\n              <li>Alt + C: Toggle high contrast</li>\n              <li>Alt + T: Toggle large text</li>\n              <li>Alt + F: Toggle fullscreen</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n    \n    const AccessibilityToolbar = () => (\n      <div className=\"fixed bottom-4 right-4 z-40 flex flex-col gap-2\">\n        <TooltipProvider>\n          {/* Accessibility Panel Toggle */}\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                size=\"icon\"\n                variant={showA11yPanel ? \"default\" : \"secondary\"}\n                onClick={() => setShowA11yPanel(!showA11yPanel)}\n                className=\"rounded-full shadow-lg hover:scale-110 transition-all\"\n                aria-label=\"Open accessibility settings\"\n              >\n                <Accessibility className=\"h-4 w-4\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"left\">\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Accessibility Settings</div>\n                <div className=\"text-xs text-muted-foreground\">Alt + A</div>\n              </div>\n            </TooltipContent>\n          </Tooltip>\n          \n          {/* High Contrast Toggle */}\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                size=\"icon\"\n                variant={a11ySettings.highContrast ? \"default\" : \"secondary\"}\n                onClick={() => setA11ySettings(prev => ({ ...prev, highContrast: !prev.highContrast }))}\n                className=\"rounded-full shadow-lg hover:scale-110 transition-all\"\n                aria-label=\"Toggle high contrast mode\"\n              >\n                {a11ySettings.highContrast ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"left\">\n              <div className=\"text-center\">\n                <div className=\"font-medium\">High Contrast</div>\n                <div className=\"text-xs text-muted-foreground\">Alt + C</div>\n              </div>\n            </TooltipContent>\n          </Tooltip>\n          \n          {/* Sound Toggle */}\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                size=\"icon\"\n                variant={a11ySettings.soundEnabled ? \"default\" : \"secondary\"}\n                onClick={() => setA11ySettings(prev => ({ ...prev, soundEnabled: !prev.soundEnabled }))}\n                className=\"rounded-full shadow-lg hover:scale-110 transition-all\"\n                aria-label=\"Toggle sound effects\"\n              >\n                {a11ySettings.soundEnabled ? <Volume2 className=\"h-4 w-4\" /> : <VolumeX className=\"h-4 w-4\" />}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"left\">\n              Sound Effects\n            </TooltipContent>\n          </Tooltip>\n          \n          {/* Fullscreen Toggle */}\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                size=\"icon\"\n                variant=\"secondary\"\n                onClick={toggleFullscreen}\n                className=\"rounded-full shadow-lg hover:scale-110 transition-all\"\n                aria-label=\"Toggle fullscreen mode\"\n              >\n                {isFullscreen ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"left\">\n              <div className=\"text-center\">\n                <div className=\"font-medium\">Fullscreen</div>\n                <div className=\"text-xs text-muted-foreground\">Alt + F</div>\n              </div>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </div>\n    );\n    \n    const layout = (\n      <div\n        ref={ref}\n        className={cn(\n          \"min-h-screen bg-background text-foreground transition-all duration-300\",\n          isMobile && enableMobile && \"touch-manipulation\",\n          a11ySettings.highContrast && \"contrast-more\",\n          a11ySettings.largeText && \"text-lg\",\n          className\n        )}\n        {...props}\n      >\n        {/* Skip Links */}\n        {enableA11y && (\n          <div className=\"sr-only focus-within:not-sr-only\">\n            <SkipLink targetId={mainContentId}>\n              Skip to main content\n            </SkipLink>\n          </div>\n        )}\n        \n        {/* Main Content */}\n        <main \n          id={mainContentId} \n          tabIndex={-1}\n          className=\"focus:outline-none\"\n        >\n          {children}\n        </main>\n        \n        {/* Accessibility Features */}\n        {enableA11y && (\n          <>\n            <AccessibilityToolbar />\n            {showA11yPanel && <AccessibilityPanel />}\n          </>\n        )}\n        \n        {/* Toast Notifications */}\n        <Toaster />\n      </div>\n    );\n    \n    // Wrap with keyboard navigation if enabled\n    if (enableKeyboardNav) {\n      return (\n        <KeyboardNavigationProvider \n          enableArrowKeys={false}\n          className=\"min-h-screen\"\n        >\n          {layout}\n        </KeyboardNavigationProvider>\n      );\n    }\n    \n    return layout;\n  }\n);\n\nEnhancedLayout.displayName = \"EnhancedLayout\";\n\nexport type { AccessibilitySettings };"