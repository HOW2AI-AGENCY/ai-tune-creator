/**
 * Dynamic Generation Form
 * 
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å API Suno –∏ Mureka
 */

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Sparkles, 
  Music2, 
  FileText, 
  Settings, 
  Mic,
  Volume2,
  Languages,
  Info,
  Zap,
  Timer
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { CanonicalGenerationInput } from "../types/canonical";
import { AIServiceStatusPanel } from "./AIServiceStatusPanel";
import DOMPurify from 'dompurify';

interface DynamicGenerationFormProps {
  onGenerate: (input: CanonicalGenerationInput) => void;
  isGenerating: boolean;
  className?: string;
}

export function DynamicGenerationForm({ 
  onGenerate, 
  isGenerating,
  className 
}: DynamicGenerationFormProps) {
  // Service selection
  const [selectedService, setSelectedService] = useState<'suno' | 'mureka'>('suno');
  
  // Common fields
  const [inputType, setInputType] = useState<'description' | 'lyrics'>('description');
  const [description, setDescription] = useState('');
  const [lyrics, setLyrics] = useState('');
  const [instrumental, setInstrumental] = useState(false);
  const [language, setLanguage] = useState('auto');
  
  // Suno-specific
  const [sunoModel, setSunoModel] = useState('V3_5');
  const [sunoMode, setSunoMode] = useState<'quick' | 'custom'>('custom');
  const [style, setStyle] = useState('');
  const [voiceStyle, setVoiceStyle] = useState('');
  const [tempo, setTempo] = useState('');
  
  // Mureka-specific
  const [murekaModel, setMurekaModel] = useState('V7');
  const [duration, setDuration] = useState(120);
  const [genre, setGenre] = useState('');
  const [mood, setMood] = useState('');
  const [murekaTempo, setMurekaTempo] = useState('');
  
  const { toast } = useToast();

  // Sanitize input
  const sanitizeInput = (input: string): string => {
    return DOMPurify.sanitize(input, {
      ALLOWED_TAGS: [],
      ALLOWED_ATTR: []
    }).trim();
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const mainContent = inputType === 'description' ? description : lyrics;
    const sanitizedContent = sanitizeInput(mainContent);
    
    if (!sanitizedContent || sanitizedContent.length < 10) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ",
        variant: "destructive"
      });
      return;
    }

    if (selectedService === 'suno') {
      const tags = style ? style.split(',').map(t => t.trim()).filter(Boolean) : [];
      
      const canonicalInput: CanonicalGenerationInput = {
        service: 'suno',
        inputType,
        description: inputType === 'description' ? sanitizedContent : (style || 'Create music'),
        lyrics: inputType === 'lyrics' ? sanitizeInput(lyrics) : undefined,
        tags,
        mode: sunoMode,
        flags: {
          instrumental,
          language,
          voiceStyle: voiceStyle || undefined,
          tempo: tempo || undefined,
          model: sunoModel === 'auto' ? undefined : sunoModel,
        },
        context: {
          projectId: null,
          artistId: null,
          useInbox: true
        }
      };

      console.log('üì§ Suno Generation Request:', canonicalInput);
      onGenerate(canonicalInput);
      
    } else {
      const tags = [genre, mood].filter(Boolean);
      
      const canonicalInput: CanonicalGenerationInput = {
        service: 'mureka',
        inputType,
        description: inputType === 'description' ? sanitizedContent : `Create music for: ${sanitizedContent.slice(0, 50)}...`,
        lyrics: inputType === 'lyrics' ? sanitizeInput(lyrics) : undefined,
        tags,
        mode: 'custom',
        flags: {
          instrumental,
          language,
          tempo: murekaTempo || undefined,
          duration,
          model: murekaModel === 'auto' ? undefined : murekaModel,
        },
        context: {
          projectId: null,
          artistId: null,
          useInbox: true
        }
      };

      console.log('üì§ Mureka Generation Request:', canonicalInput);
      onGenerate(canonicalInput);
    }
  };

  const currentModel = selectedService === 'suno' ? sunoModel : murekaModel;

  return (
    <Card className={className}>
      <CardHeader className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5" />
              –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏
            </CardTitle>
            <CardDescription>
              –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º—É–∑—ã–∫—É —Å –ø–æ–º–æ—â—å—é AI
            </CardDescription>
          </div>
        </div>

        {/* Service Selector */}
        <Tabs value={selectedService} onValueChange={(v) => setSelectedService(v as 'suno' | 'mureka')}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="suno" className="flex items-center gap-2">
              <Music2 className="h-4 w-4" />
              Suno AI
            </TabsTrigger>
            <TabsTrigger value="mureka" className="flex items-center gap-2">
              <Sparkles className="h-4 w-4" />
              Mureka
            </TabsTrigger>
          </TabsList>
        </Tabs>

        {/* Service Status */}
        <AIServiceStatusPanel compact />
      </CardHeader>

      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          
          {/* Input Type Selection */}
          <div className="space-y-2">
            <Label>–¢–∏–ø –≤–≤–æ–¥–∞</Label>
            <Select value={inputType} onValueChange={(v) => setInputType(v as 'description' | 'lyrics')}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="description">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
                  </div>
                </SelectItem>
                <SelectItem value="lyrics">
                  <div className="flex items-center gap-2">
                    <Mic className="h-4 w-4" />
                    –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
            <p className="text-sm text-muted-foreground">
              {inputType === 'description' 
                ? '–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º—É–∑—ã–∫–∏'
                : '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏'
              }
            </p>
          </div>

          {/* Main Input Field */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>{inputType === 'description' ? '–û–ø–∏—Å–∞–Ω–∏–µ' : '–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏'}</Label>
              <Badge variant="outline" className="text-xs">
                {(inputType === 'description' ? description : lyrics).length} / 3000
              </Badge>
            </div>
            <Textarea
              value={inputType === 'description' ? description : lyrics}
              onChange={(e) => inputType === 'description' ? setDescription(e.target.value) : setLyrics(e.target.value)}
              placeholder={
                inputType === 'description'
                  ? "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Ä–æ–∫ —Ç—Ä–µ–∫ —Å —è—Ä–∫–∏–º–∏ –≥–∏—Ç–∞—Ä–Ω—ã–º–∏ —Ä–∏—Ñ—Ñ–∞–º–∏ –∏ –º–æ—â–Ω—ã–º –≤–æ–∫–∞–ª–æ–º..."
                  : "Verse 1:\n–í —Ç–∏—à–∏–Ω–µ –Ω–æ—á–Ω–æ–π...\n\nChorus:\n–ú—ã –ª–µ—Ç–∏–º –∫–∞–∫ –ø—Ç–∏—Ü—ã..."
              }
              className="min-h-[150px] resize-y"
              disabled={isGenerating}
              maxLength={3000}
            />
          </div>

          {/* Suno-specific fields */}
          {selectedService === 'suno' && (
            <>
              {inputType === 'lyrics' && (
                <div className="space-y-2">
                  <Label>–°—Ç–∏–ª—å –º—É–∑—ã–∫–∏</Label>
                  <Input
                    value={style}
                    onChange={(e) => setStyle(e.target.value)}
                    placeholder="Pop, Rock, Electronic, Upbeat, Energetic..."
                    disabled={isGenerating}
                  />
                  <p className="text-sm text-muted-foreground">
                    –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∂–∞–Ω—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
                  </p>
                </div>
              )}

              <div className="space-y-2">
                <Label>–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</Label>
                <Select value={sunoMode} onValueChange={(v) => setSunoMode(v as 'quick' | 'custom')}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quick">
                      <div className="flex items-center gap-2">
                        <Zap className="h-4 w-4" />
                        –ë—ã—Å—Ç—Ä—ã–π (–∞–≤—Ç–æ-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
                      </div>
                    </SelectItem>
                    <SelectItem value="custom">
                      <div className="flex items-center gap-2">
                        <Settings className="h-4 w-4" />
                        –ö–∞—Å—Ç–æ–º–Ω—ã–π (–ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å)
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>–ú–æ–¥–µ–ª—å AI</Label>
                <Select value={sunoModel} onValueChange={setSunoModel}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="auto">–ê–≤—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                    <SelectItem value="V3">V3 - –ö–ª–∞—Å—Å–∏–∫–∞ (–º–∞–∫—Å 2 –º–∏–Ω)</SelectItem>
                    <SelectItem value="V3_5">V3.5 - –°—Ç–∞–±–∏–ª—å–Ω–∞—è (–º–∞–∫—Å 4 –º–∏–Ω)</SelectItem>
                    <SelectItem value="V4">V4 - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–∫–∞–ª (–º–∞–∫—Å 4 –º–∏–Ω)</SelectItem>
                    <SelectItem value="V4_5">V4.5 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è (–º–∞–∫—Å 8 –º–∏–Ω)</SelectItem>
                    <SelectItem value="V4_5PLUS">V4.5+ - –ü—Ä–µ–º–∏—É–º (–º–∞–∫—Å 8 –º–∏–Ω)</SelectItem>
                  </SelectContent>
                </Select>
                <p className="text-sm text-muted-foreground">
                  {sunoModel === 'V3' && '‚è± –î–æ 2 –º–∏–Ω—É—Ç ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å'}
                  {sunoModel === 'V3_5' && '‚è± –î–æ 4 –º–∏–Ω—É—Ç ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'}
                  {sunoModel === 'V4' && '‚è± –î–æ 4 –º–∏–Ω—É—Ç ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–∫–∞–ª'}
                  {sunoModel === 'V4_5' && '‚è± –î–æ 8 –º–∏–Ω—É—Ç ‚Ä¢ –£–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã'}
                  {sunoModel === 'V4_5PLUS' && '‚è± –î–æ 8 –º–∏–Ω—É—Ç ‚Ä¢ –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ'}
                </p>
              </div>

              {sunoMode === 'custom' && (
                <div className="space-y-4 p-4 border rounded-lg bg-muted/50">
                  <div className="flex items-center gap-2 text-sm font-medium">
                    <Settings className="h-4 w-4" />
                    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                  </div>
                  
                  <div className="space-y-2">
                    <Label>–°—Ç–∏–ª—å –≤–æ–∫–∞–ª–∞</Label>
                    <Select value={voiceStyle} onValueChange={setVoiceStyle}>
                      <SelectTrigger>
                        <SelectValue placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</SelectItem>
                        <SelectItem value="male">–ú—É–∂—Å–∫–æ–π</SelectItem>
                        <SelectItem value="female">–ñ–µ–Ω—Å–∫–∏–π</SelectItem>
                        <SelectItem value="child">–î–µ—Ç—Å–∫–∏–π</SelectItem>
                        <SelectItem value="robotic">–†–æ–±–æ—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>–¢–µ–º–ø</Label>
                    <Select value={tempo} onValueChange={setTempo}>
                      <SelectTrigger>
                        <SelectValue placeholder="–ê–≤—Ç–æ" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">–ê–≤—Ç–æ</SelectItem>
                        <SelectItem value="slow">–ú–µ–¥–ª–µ–Ω–Ω—ã–π (60-80 BPM)</SelectItem>
                        <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π (80-120 BPM)</SelectItem>
                        <SelectItem value="fast">–ë—ã—Å—Ç—Ä—ã–π (120-160 BPM)</SelectItem>
                        <SelectItem value="very-fast">–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π (160+ BPM)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
            </>
          )}

          {/* Mureka-specific fields */}
          {selectedService === 'mureka' && (
            <>
              <div className="space-y-2">
                <Label>–ú–æ–¥–µ–ª—å AI</Label>
                <Select value={murekaModel} onValueChange={setMurekaModel}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="auto">–ê–≤—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</SelectItem>
                    <SelectItem value="V7">V7 - –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å</SelectItem>
                    <SelectItem value="O1">O1 - Chain-of-Thought</SelectItem>
                    <SelectItem value="V6">V6 - –°—Ç–∞–±–∏–ª—å–Ω–∞—è</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label className="flex items-center gap-2">
                    <Timer className="h-4 w-4" />
                    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                  </Label>
                  <Badge variant="outline">{duration} —Å–µ–∫</Badge>
                </div>
                <Slider
                  min={30}
                  max={300}
                  step={10}
                  value={[duration]}
                  onValueChange={(vals) => setDuration(vals[0])}
                  disabled={isGenerating}
                />
                <p className="text-sm text-muted-foreground">
                  –û—Ç 30 –¥–æ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>–ñ–∞–Ω—Ä</Label>
                  <Input
                    value={genre}
                    onChange={(e) => setGenre(e.target.value)}
                    placeholder="Pop, Rock..."
                    disabled={isGenerating}
                  />
                </div>

                <div className="space-y-2">
                  <Label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Label>
                  <Input
                    value={mood}
                    onChange={(e) => setMood(e.target.value)}
                    placeholder="Happy, Sad..."
                    disabled={isGenerating}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>–¢–µ–º–ø</Label>
                <Select value={murekaTempo} onValueChange={setMurekaTempo}>
                  <SelectTrigger>
                    <SelectValue placeholder="–ê–≤—Ç–æ" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="">–ê–≤—Ç–æ</SelectItem>
                    <SelectItem value="slow">–ú–µ–¥–ª–µ–Ω–Ω—ã–π</SelectItem>
                    <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                    <SelectItem value="fast">–ë—ã—Å—Ç—Ä—ã–π</SelectItem>
                    <SelectItem value="very-fast">–û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </>
          )}

          {/* Common Options */}
          <Separator />
          
          <div className="space-y-4">
            <div className="flex items-center justify-between rounded-lg border p-4">
              <div className="space-y-0.5">
                <Label className="text-base flex items-center gap-2">
                  <Volume2 className="h-4 w-4" />
                  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
                </Label>
                <p className="text-sm text-muted-foreground">
                  –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫ –±–µ–∑ –≤–æ–∫–∞–ª–∞
                </p>
              </div>
              <Switch
                checked={instrumental}
                onCheckedChange={setInstrumental}
                disabled={isGenerating}
              />
            </div>

            <div className="space-y-2">
              <Label className="flex items-center gap-2">
                <Languages className="h-4 w-4" />
                –Ø–∑—ã–∫
              </Label>
              <Select value={language} onValueChange={setLanguage}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="auto">–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                  <SelectItem value="ru">–†—É—Å—Å–∫–∏–π</SelectItem>
                  <SelectItem value="zh">‰∏≠Êñá</SelectItem>
                  <SelectItem value="ja">Êó•Êú¨Ë™û</SelectItem>
                  <SelectItem value="ko">ÌïúÍµ≠Ïñ¥</SelectItem>
                  <SelectItem value="de">Deutsch</SelectItem>
                  <SelectItem value="fr">Fran√ßais</SelectItem>
                  <SelectItem value="es">Espa√±ol</SelectItem>
                  <SelectItem value="it">Italiano</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Info Alert */}
          <Alert>
            <Info className="h-4 w-4" />
            <AlertDescription className="text-sm">
              {selectedService === 'suno' 
                ? 'üí° Suno AI —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –ø–µ—Å–Ω–∏ —Å –≤–æ–∫–∞–ª–æ–º. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 45-90 —Å–µ–∫—É–Ω–¥.'
                : 'üí° Mureka —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º—É–∑—ã–∫–µ. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 60-120 —Å–µ–∫—É–Ω–¥.'
              }
            </AlertDescription>
          </Alert>

          {/* Submit Button */}
          <Button 
            type="submit" 
            className="w-full" 
            size="lg"
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <div className="animate-spin mr-2">‚è≥</div>
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
              </>
            ) : (
              <>
                <Sparkles className="mr-2 h-5 w-5" />
                –°–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É
              </>
            )}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
