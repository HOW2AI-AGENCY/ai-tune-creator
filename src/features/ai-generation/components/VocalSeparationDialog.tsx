import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Music2, Download, Play, Pause } from 'lucide-react';

interface VocalSeparationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  track: {
    id: string;
    title: string;
    metadata?: any;
  };
}

interface StemUrls {
  original?: string;
  vocals?: string;
  instrumental?: string;
  backingVocals?: string;
  drums?: string;
  bass?: string;
  guitar?: string;
  keyboard?: string;
  percussion?: string;
  strings?: string;
  synth?: string;
  fx?: string;
  brass?: string;
  woodwinds?: string;
}

export function VocalSeparationDialog({ open, onOpenChange, track }: VocalSeparationDialogProps) {
  const [separationType, setSeparationType] = useState<'separate_vocal' | 'split_stem'>('separate_vocal');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [stems, setStems] = useState<StemUrls | null>(null);
  const [taskId, setTaskId] = useState<string | null>(null);
  const [playingUrl, setPlayingUrl] = useState<string | null>(null);
  const { toast } = useToast();

  const handleStartSeparation = async () => {
    try {
      setIsProcessing(true);
      setProgress(10);

      const taskId = track.metadata?.suno_task_id;
      const audioId = track.metadata?.suno_audio_id;

      if (!taskId || !audioId) {
        throw new Error('Suno track information not found. This feature only works with tracks generated by Suno.');
      }

      setProgress(20);

      const { data, error } = await supabase.functions.invoke('separate-suno-vocals', {
        body: {
          taskId,
          audioId,
          type: separationType
        }
      });

      if (error) throw error;

      setTaskId(data.taskId);
      setProgress(30);

      toast({
        title: "Separation started",
        description: `${separationType === 'separate_vocal' ? 'Vocal separation' : 'Stem separation'} in progress...`
      });

      // Start polling for status
      pollSeparationStatus(data.taskId);

    } catch (error: any) {
      console.error('Separation error:', error);
      toast({
        title: "Separation failed",
        description: error.message,
        variant: "destructive"
      });
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const pollSeparationStatus = async (separationTaskId: string) => {
    const pollInterval = setInterval(async () => {
      try {
        const { data, error } = await supabase.functions.invoke('get-suno-vocal-separation-info', {
          body: { taskId: separationTaskId }
        });

        if (error) throw error;

        if (data.isCompleted) {
          clearInterval(pollInterval);
          setStems(data.stems);
          setProgress(100);
          setIsProcessing(false);
          
          toast({
            title: "Separation completed",
            description: "Audio stems are ready for download"
          });
        } else if (data.isFailed) {
          clearInterval(pollInterval);
          setIsProcessing(false);
          setProgress(0);
          
          toast({
            title: "Separation failed",
            description: data.errorMessage || "Unknown error occurred",
            variant: "destructive"
          });
        } else {
          // Still processing, update progress
          setProgress(prev => Math.min(prev + 5, 90));
        }
      } catch (error: any) {
        console.error('Status polling error:', error);
        clearInterval(pollInterval);
        setIsProcessing(false);
      }
    }, 5000); // Poll every 5 seconds

    // Cleanup after 10 minutes
    setTimeout(() => {
      clearInterval(pollInterval);
      if (isProcessing) {
        setIsProcessing(false);
        toast({
          title: "Timeout",
          description: "Separation is taking longer than expected. Please try again.",
          variant: "destructive"
        });
      }
    }, 600000);
  };

  const playAudio = (url: string) => {
    if (playingUrl === url) {
      setPlayingUrl(null);
      return;
    }
    setPlayingUrl(url);
  };

  const downloadStem = (url: string, filename: string) => {
    const link = document.createElement('a');
    link.href = url;
    link.download = `${track.title}_${filename}.mp3`;
    link.click();
  };

  const renderStemPlayer = (url: string | undefined, label: string, filename: string) => {
    if (!url) return null;

    return (
      <div className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
        <div className="flex items-center gap-3">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => playAudio(url)}
          >
            {playingUrl === url ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
          </Button>
          <span className="font-medium">{label}</span>
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={() => downloadStem(url, filename)}
        >
          <Download className="h-4 w-4 mr-2" />
          Download
        </Button>
      </div>
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Music2 className="h-5 w-5" />
            Vocal & Stem Separation
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          <div>
            <h3 className="font-semibold mb-2">Track: {track.title}</h3>
            <p className="text-sm text-muted-foreground">
              Separate vocals and instruments using AI-powered source separation
            </p>
          </div>

          {!isProcessing && !stems && (
            <div className="space-y-4">
              <div>
                <Label className="text-base font-semibold">Separation Type</Label>
                <RadioGroup 
                  value={separationType} 
                  onValueChange={(value: 'separate_vocal' | 'split_stem') => setSeparationType(value)}
                  className="mt-2"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="separate_vocal" id="separate_vocal" />
                    <Label htmlFor="separate_vocal" className="cursor-pointer">
                      <div>
                        <div className="font-medium">Vocal Separation</div>
                        <div className="text-sm text-muted-foreground">
                          Split into vocals and instrumental tracks
                        </div>
                      </div>
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="split_stem" id="split_stem" />
                    <Label htmlFor="split_stem" className="cursor-pointer">
                      <div>
                        <div className="font-medium">Full Stem Separation</div>
                        <div className="text-sm text-muted-foreground">
                          Separate into individual instruments (drums, bass, guitar, etc.)
                        </div>
                      </div>
                    </Label>
                  </div>
                </RadioGroup>
              </div>

              <Button 
                onClick={handleStartSeparation}
                className="w-full"
                size="lg"
              >
                Start Separation
              </Button>
            </div>
          )}

          {isProcessing && (
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="font-medium">Processing...</span>
                  <span className="text-sm text-muted-foreground">{progress}%</span>
                </div>
                <Progress value={progress} className="w-full" />
              </div>
              <p className="text-sm text-muted-foreground">
                This may take several minutes. The dialog will update automatically when complete.
              </p>
            </div>
          )}

          {stems && (
            <div className="space-y-4">
              <h3 className="font-semibold text-lg">Separated Stems</h3>
              
              <div className="space-y-3">
                {renderStemPlayer(stems.vocals, "Vocals", "vocals")}
                {renderStemPlayer(stems.instrumental, "Instrumental", "instrumental")}
                {renderStemPlayer(stems.backingVocals, "Backing Vocals", "backing_vocals")}
                {renderStemPlayer(stems.drums, "Drums", "drums")}
                {renderStemPlayer(stems.bass, "Bass", "bass")}
                {renderStemPlayer(stems.guitar, "Guitar", "guitar")}
                {renderStemPlayer(stems.keyboard, "Keyboard", "keyboard")}
                {renderStemPlayer(stems.percussion, "Percussion", "percussion")}
                {renderStemPlayer(stems.strings, "Strings", "strings")}
                {renderStemPlayer(stems.synth, "Synthesizer", "synth")}
                {renderStemPlayer(stems.fx, "Effects", "fx")}
                {renderStemPlayer(stems.brass, "Brass", "brass")}
                {renderStemPlayer(stems.woodwinds, "Woodwinds", "woodwinds")}
              </div>

              <Button 
                onClick={() => {
                  setStems(null);
                  setTaskId(null);
                  setProgress(0);
                }}
                variant="outline"
                className="w-full"
              >
                Start New Separation
              </Button>
            </div>
          )}
        </div>

        {playingUrl && (
          <audio 
            key={playingUrl}
            src={playingUrl} 
            autoPlay 
            controls 
            className="w-full mt-4"
            onEnded={() => setPlayingUrl(null)}
          />
        )}
      </DialogContent>
    </Dialog>
  );
}