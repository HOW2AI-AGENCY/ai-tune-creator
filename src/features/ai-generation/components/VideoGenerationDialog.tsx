import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Video, Download, Play } from 'lucide-react';

interface VideoGenerationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  track: {
    id: string;
    title: string;
    metadata?: any;
  };
}

export function VideoGenerationDialog({ open, onOpenChange, track }: VideoGenerationDialogProps) {
  const [author, setAuthor] = useState('');
  const [domainName, setDomainName] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const [taskId, setTaskId] = useState<string | null>(null);
  const { toast } = useToast();

  const handleStartGeneration = async () => {
    try {
      setIsProcessing(true);
      setProgress(10);

      const taskId = track.metadata?.suno_task_id;
      const audioId = track.metadata?.suno_audio_id;

      if (!taskId || !audioId) {
        throw new Error('Suno track information not found. This feature only works with tracks generated by Suno.');
      }

      setProgress(20);

      const { data, error } = await supabase.functions.invoke('generate-suno-video', {
        body: {
          taskId,
          audioId,
          author: author.trim() || undefined,
          domainName: domainName.trim() || undefined
        }
      });

      if (error) throw error;

      setTaskId(data.taskId);
      setProgress(30);

      toast({
        title: "Video generation started",
        description: "Creating your music video with visualizations..."
      });

      // Start polling for status
      pollVideoStatus(data.taskId);

    } catch (error: any) {
      console.error('Video generation error:', error);
      toast({
        title: "Video generation failed",
        description: error.message,
        variant: "destructive"
      });
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const pollVideoStatus = async (videoTaskId: string) => {
    const pollInterval = setInterval(async () => {
      try {
        const { data, error } = await supabase.functions.invoke('get-suno-video-info', {
          body: { taskId: videoTaskId }
        });

        if (error) throw error;

        if (data.isCompleted) {
          clearInterval(pollInterval);
          setVideoUrl(data.videoUrl);
          setProgress(100);
          setIsProcessing(false);
          
          toast({
            title: "Video generation completed",
            description: "Your music video is ready!"
          });
        } else if (data.isFailed) {
          clearInterval(pollInterval);
          setIsProcessing(false);
          setProgress(0);
          
          toast({
            title: "Video generation failed",
            description: data.errorMessage || "Unknown error occurred",
            variant: "destructive"
          });
        } else {
          // Still processing, update progress
          setProgress(prev => Math.min(prev + 3, 90));
        }
      } catch (error: any) {
        console.error('Status polling error:', error);
        clearInterval(pollInterval);
        setIsProcessing(false);
      }
    }, 10000); // Poll every 10 seconds (video generation takes longer)

    // Cleanup after 15 minutes
    setTimeout(() => {
      clearInterval(pollInterval);
      if (isProcessing) {
        setIsProcessing(false);
        toast({
          title: "Timeout",
          description: "Video generation is taking longer than expected. Please try again.",
          variant: "destructive"
        });
      }
    }, 900000);
  };

  const downloadVideo = () => {
    if (!videoUrl) return;
    
    const link = document.createElement('a');
    link.href = videoUrl;
    link.download = `${track.title}_music_video.mp4`;
    link.click();
  };

  const playVideo = () => {
    if (!videoUrl) return;
    window.open(videoUrl, '_blank');
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Video className="h-5 w-5" />
            Generate Music Video
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          <div>
            <h3 className="font-semibold mb-2">Track: {track.title}</h3>
            <p className="text-sm text-muted-foreground">
              Create an MP4 video with visualizations for your music track
            </p>
          </div>

          {!isProcessing && !videoUrl && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="author">Artist Name (optional)</Label>
                <Input
                  id="author"
                  value={author}
                  onChange={(e) => setAuthor(e.target.value.substring(0, 50))}
                  placeholder="Artist or creator name to display"
                  maxLength={50}
                />
                <p className="text-xs text-muted-foreground">
                  Will be shown prominently in the video ({author.length}/50)
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="domain">Domain/Brand (optional)</Label>
                <Input
                  id="domain"
                  value={domainName}
                  onChange={(e) => setDomainName(e.target.value.substring(0, 50))}
                  placeholder="Website or brand watermark"
                  maxLength={50}
                />
                <p className="text-xs text-muted-foreground">
                  Will appear as a watermark ({domainName.length}/50)
                </p>
              </div>

              <Button 
                onClick={handleStartGeneration}
                className="w-full"
                size="lg"
              >
                Generate Video
              </Button>
            </div>
          )}

          {isProcessing && (
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="font-medium">Generating video...</span>
                  <span className="text-sm text-muted-foreground">{progress}%</span>
                </div>
                <Progress value={progress} className="w-full" />
              </div>
              <p className="text-sm text-muted-foreground">
                Video generation typically takes 5-10 minutes. The dialog will update automatically when complete.
              </p>
            </div>
          )}

          {videoUrl && (
            <div className="space-y-4">
              <h3 className="font-semibold text-lg">Video Ready!</h3>
              
              <div className="flex gap-3">
                <Button onClick={playVideo} className="flex-1">
                  <Play className="h-4 w-4 mr-2" />
                  Preview Video
                </Button>
                <Button onClick={downloadVideo} variant="outline" className="flex-1">
                  <Download className="h-4 w-4 mr-2" />
                  Download MP4
                </Button>
              </div>

              <div className="p-4 bg-muted/50 rounded-lg">
                <p className="text-sm">
                  <strong>Video URL:</strong><br />
                  <a 
                    href={videoUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-primary hover:underline break-all"
                  >
                    {videoUrl}
                  </a>
                </p>
              </div>

              <Button 
                onClick={() => {
                  setVideoUrl(null);
                  setTaskId(null);
                  setProgress(0);
                  setAuthor('');
                  setDomainName('');
                }}
                variant="outline"
                className="w-full"
              >
                Generate Another Video
              </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}