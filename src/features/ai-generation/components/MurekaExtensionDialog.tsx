import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Loader2, Music, Plus, Upload } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface MurekaExtensionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onTrackExtended?: (trackData: any) => void;
}

export function MurekaExtensionDialog({ open, onOpenChange, onTrackExtended }: MurekaExtensionDialogProps) {
  const [sourceType, setSourceType] = useState<'song_id' | 'upload_audio_id'>('song_id');
  const [songId, setSongId] = useState('');
  const [uploadAudioId, setUploadAudioId] = useState('');
  const [lyrics, setLyrics] = useState('');
  const [extendAt, setExtendAt] = useState(30000); // 30 seconds in milliseconds
  const [isExtending, setIsExtending] = useState(false);
  const [result, setResult] = useState<any>(null);
  const { toast } = useToast();

  const handleExtend = async () => {
    if (!lyrics.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    const sourceId = sourceType === 'song_id' ? songId : uploadAudioId;
    if (!sourceId.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: sourceType === 'song_id' ? "–í–≤–µ–¥–∏—Ç–µ ID –ø–µ—Å–Ω–∏" : "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ",
        variant: "destructive"
      });
      return;
    }

    if (extendAt < 8000 || extendAt > 420000) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—Ä–µ–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 8 –¥–æ 420 —Å–µ–∫—É–Ω–¥",
        variant: "destructive"
      });
      return;
    }

    setIsExtending(true);
    try {
      const response = await supabase.functions.invoke('extend-mureka-song', {
        body: {
          [sourceType]: sourceId,
          lyrics,
          extend_at: extendAt
        }
      });

      if (response.error) {
        throw new Error(response.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API');
      }

      if (!response.data?.success) {
        throw new Error(response.data?.error || '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
      }

      const { data } = response.data;
      setResult(data);

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ó–∞–¥–∞—á–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–µ—Å–Ω–∏ —Å–æ–∑–¥–∞–Ω–∞"
      });

      if (onTrackExtended) {
        onTrackExtended(data);
      }

    } catch (error: any) {
      console.error('Error extending song:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –ø–µ—Å–Ω–∏',
        variant: "destructive"
      });
    } finally {
      setIsExtending(false);
    }
  };

  const handleReset = () => {
    setSongId('');
    setUploadAudioId('');
    setLyrics('');
    setExtendAt(30000);
    setResult(null);
  };

  const formatTime = (milliseconds: number): string => {
    const seconds = Math.floor(milliseconds / 1000);
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Plus className="h-5 w-5 text-primary" />
            –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ —Å Mureka AI
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Source Type Selection */}
          <div className="space-y-4">
            <Label>–ò—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ</Label>
            <Select value={sourceType} onValueChange={(value: 'song_id' | 'upload_audio_id') => setSourceType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="song_id">ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏</SelectItem>
                <SelectItem value="upload_audio_id">ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Source ID Input */}
          <div className="space-y-2">
            <Label htmlFor="source-id">
              {sourceType === 'song_id' ? 'ID –ø–µ—Å–Ω–∏' : 'ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ'}
            </Label>
            <Input
              id="source-id"
              value={sourceType === 'song_id' ? songId : uploadAudioId}
              onChange={(e) => sourceType === 'song_id' ? setSongId(e.target.value) : setUploadAudioId(e.target.value)}
              placeholder={sourceType === 'song_id' ? "–í–≤–µ–¥–∏—Ç–µ ID –ø–µ—Å–Ω–∏..." : "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."}
            />
            <p className="text-sm text-muted-foreground">
              {sourceType === 'song_id' 
                ? "ID –ø–µ—Å–Ω–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" 
                : "ID —Ñ–∞–π–ª–∞, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ files/upload API (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –º–ª–∞–¥—à–µ –º–µ—Å—è—Ü–∞)"
              }
            </p>
          </div>

          {/* Extend At Time */}
          <div className="space-y-2">
            <Label htmlFor="extend-at">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)</Label>
            <div className="flex gap-2 items-center">
              <Input
                id="extend-at"
                type="number"
                value={extendAt}
                onChange={(e) => setExtendAt(Number(e.target.value))}
                min={8000}
                max={420000}
                step={1000}
              />
              <span className="text-sm text-muted-foreground">
                ({formatTime(extendAt)})
              </span>
            </div>
            <p className="text-sm text-muted-foreground">
              –û—Ç 8 –¥–æ 420 —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –±–æ–ª—å—à–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Å–Ω–∏, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏.
            </p>
          </div>

          {/* Lyrics Input */}
          <div className="space-y-2">
            <Label htmlFor="lyrics">–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</Label>
            <Textarea
              id="lyrics"
              value={lyrics}
              onChange={(e) => setLyrics(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Å–Ω—é..."
              className="min-h-32"
            />
          </div>

          {/* Extend Button */}
          <Button 
            onClick={handleExtend} 
            disabled={isExtending}
            className="w-full"
          >
            {isExtending ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...
              </>
            ) : (
              <>
                <Plus className="h-4 w-4 mr-2" />
                –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–µ—Å–Ω—é
              </>
            )}
          </Button>

          {/* Result */}
          {result && (
            <div className="space-y-4 p-4 border rounded-lg bg-muted/50">
              <div className="text-center">
                <h4 className="font-semibold text-green-600 mb-2">
                  ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!
                </h4>
                <p className="text-sm text-muted-foreground mb-4">
                  ID –∑–∞–¥–∞—á–∏: <code className="bg-background px-2 py-1 rounded">{result.id}</code>
                </p>
              </div>

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium">–ú–æ–¥–µ–ª—å:</span> {result.model}
                </div>
                <div>
                  <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span> {result.status}
                </div>
                <div>
                  <span className="font-medium">–°–æ–∑–¥–∞–Ω–æ:</span> {new Date(result.created_at * 1000).toLocaleString('ru-RU')}
                </div>
                {result.finished_at && (
                  <div>
                    <span className="font-medium">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span> {new Date(result.finished_at * 1000).toLocaleString('ru-RU')}
                  </div>
                )}
              </div>

              {result.failed_reason && (
                <div className="p-2 bg-destructive/10 border border-destructive/20 rounded">
                  <span className="text-sm text-destructive">
                    <strong>–û—à–∏–±–∫–∞:</strong> {result.failed_reason}
                  </span>
                </div>
              )}

              <Button variant="outline" onClick={handleReset} className="w-full">
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
              </Button>
            </div>
          )}

          <div className="text-xs text-muted-foreground">
            <p>üí° <strong>–°–æ–≤–µ—Ç:</strong> –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–µ—Å–Ω—é –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ</p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}