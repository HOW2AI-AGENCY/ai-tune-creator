import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2, Music, Download, ExternalLink } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface MurekaStemDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function MurekaStemDialog({ open, onOpenChange }: MurekaStemDialogProps) {
  const [audioUrl, setAudioUrl] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<{ zip_url: string; expires_at: number } | null>(null);
  const { toast } = useToast();

  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url);
      return url.includes('mp3') || url.includes('wav') || url.includes('m4a') || url.includes('audio');
    } catch {
      return false;
    }
  };

  const handleSeparate = async () => {
    if (!audioUrl.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞",
        variant: "destructive"
      });
      return;
    }

    if (!isValidUrl(audioUrl)) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      const response = await supabase.functions.invoke('mureka-stem-separation', {
        body: { url: audioUrl }
      });

      if (response.error) {
        throw new Error(response.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API');
      }

      if (!response.data?.success) {
        throw new Error(response.data?.error || '–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è');
      }

      const { data } = response.data;
      setResult(data);

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ê—É–¥–∏–æ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –¥–æ—Ä–æ–∂–∫–∏"
      });

    } catch (error: any) {
      console.error('Error separating stems:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∞—É–¥–∏–æ',
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDownload = () => {
    if (result?.zip_url) {
      window.open(result.zip_url, '_blank');
    }
  };

  const formatExpirationDate = (timestamp: number): string => {
    return new Date(timestamp * 1000).toLocaleString('ru-RU');
  };

  const handleReset = () => {
    setAudioUrl('');
    setResult(null);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Music className="h-5 w-5 text-primary" />
            –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ –¥–æ—Ä–æ–∂–∫–∏
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          <div className="space-y-4">
            <div>
              <Label htmlFor="audio-url">URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞</Label>
              <Input
                id="audio-url"
                value={audioUrl}
                onChange={(e) => setAudioUrl(e.target.value)}
                placeholder="https://example.com/song.mp3"
                className="mt-1"
              />
              <p className="text-sm text-muted-foreground mt-1">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)
              </p>
            </div>
          </div>

          {/* Process Button */}
          <Button 
            onClick={handleSeparate} 
            disabled={isProcessing || !audioUrl.trim()}
            className="w-full"
          >
            {isProcessing ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ...
              </>
            ) : (
              <>
                <Music className="h-4 w-4 mr-2" />
                –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–æ—Ä–æ–∂–∫–∏
              </>
            )}
          </Button>

          {/* Result */}
          {result && (
            <div className="space-y-4 p-4 border rounded-lg bg-muted/50">
              <div className="text-center">
                <h4 className="font-semibold text-green-600 mb-2">
                  ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
                </h4>
                <p className="text-sm text-muted-foreground mb-4">
                  –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏: –≤–æ–∫–∞–ª, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –±–∞—Ä–∞–±–∞–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                </p>
              </div>

              <div className="space-y-2">
                <Button onClick={handleDownload} className="w-full">
                  <Download className="h-4 w-4 mr-2" />
                  –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤
                </Button>
                
                <Button 
                  variant="outline" 
                  onClick={() => window.open(result.zip_url, '_blank')}
                  className="w-full"
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                </Button>
              </div>

              <div className="text-xs text-muted-foreground text-center">
                –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {formatExpirationDate(result.expires_at)}
              </div>

              <Button variant="outline" onClick={handleReset} className="w-full">
                –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª
              </Button>
            </div>
          )}

          <div className="text-xs text-muted-foreground">
            <p>üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ (320 kbps –∏–ª–∏ –≤—ã—à–µ)</p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}