import { useCallback } from 'react';
import { useTelegramWebApp } from './useTelegramWebApp';
import { useTelegramAuth } from './useTelegramAuth';
import { useToast } from './use-toast';
import { supabase } from '@/integrations/supabase/client';

interface ShareTrackParams {
  track: {
    id: string;
    title: string;
    audio_url?: string;
    project?: {
      title: string;
      artist?: {
        name: string;
      };
    };
  };
}

export function useTelegramShare() {
  const { isInTelegram, webApp } = useTelegramWebApp();
  const { authData } = useTelegramAuth();
  const { toast } = useToast();

  const shareTrackToTelegram = useCallback(async ({ track }: ShareTrackParams) => {
    if (!isInTelegram || !authData?.telegramId) {
      // Fallback to web share
      if (navigator.share && track.audio_url) {
        try {
          await navigator.share({
            title: track.title,
            text: `Check out this AI-generated track: ${track.title}`,
            url: track.audio_url
          });
          return true;
        } catch (error) {
          console.error('Web share failed:', error);
        }
      }
      
      // Fallback to clipboard
      if (track.audio_url) {
        try {
          await navigator.clipboard.writeText(track.audio_url);
          toast({
            title: "Link copied",
            description: "Track link copied to clipboard"
          });
          return true;
        } catch (error) {
          console.error('Clipboard copy failed:', error);
        }
      }
      return false;
    }

    try {
      // Send track to user via Telegram bot
      const { data, error } = await supabase.functions.invoke('telegram-share-track', {
        body: {
          telegram_id: authData.telegramId,
          track_id: track.id,
          track_title: track.title,
          track_url: track.audio_url,
          artist_name: track.project?.artist?.name || 'AI Composer'
        }
      });

      if (error) throw error;

      if (data?.success) {
        toast({
          title: "Shared to Telegram! ðŸŽµ",
          description: "Track sent to your personal chat with the bot"
        });
        return true;
      } else {
        throw new Error(data?.error || 'Failed to share track');
      }
    } catch (error: any) {
      console.error('Telegram share failed:', error);
      toast({
        title: "Share failed",
        description: error.message || "Could not share track",
        variant: "destructive"
      });
      return false;
    }
  }, [isInTelegram, authData, toast]);

  const sharePlaylist = useCallback(async (tracks: ShareTrackParams['track'][]) => {
    if (!isInTelegram || !authData?.telegramId) {
      return false;
    }

    try {
      const { data, error } = await supabase.functions.invoke('telegram-share-playlist', {
        body: {
          telegram_id: authData.telegramId,
          tracks: tracks.map(track => ({
            id: track.id,
            title: track.title,
            url: track.audio_url,
            artist: track.project?.artist?.name || 'AI Composer'
          }))
        }
      });

      if (error) throw error;

      if (data?.success) {
        toast({
          title: "Playlist shared! ðŸŽ¶",
          description: `${tracks.length} tracks sent to your Telegram`
        });
        return true;
      }
    } catch (error: any) {
      console.error('Playlist share failed:', error);
      toast({
        title: "Share failed",
        description: error.message || "Could not share playlist",
        variant: "destructive"
      });
    }

    return false;
  }, [isInTelegram, authData, toast]);

  const copyShareLink = useCallback(async (track: ShareTrackParams['track']) => {
    const shareText = `ðŸŽµ ${track.title}\n\nGenerated by AI Music Studio\n${track.audio_url || window.location.href}`;
    
    try {
      await navigator.clipboard.writeText(shareText);
      toast({
        title: "Share link copied! ðŸ“‹",
        description: "Track details copied to clipboard"
      });
      return true;
    } catch (error) {
      console.error('Copy failed:', error);
      toast({
        title: "Copy failed",
        description: "Could not copy link",
        variant: "destructive"
      });
      return false;
    }
  }, [toast]);

  return {
    shareTrackToTelegram,
    sharePlaylist,
    copyShareLink,
    canShareToTelegram: isInTelegram && !!authData?.telegramId,
    canWebShare: !!navigator.share
  };
}