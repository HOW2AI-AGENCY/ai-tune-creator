/**
 * @fileoverview –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mureka AI
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–µ–ª—ë–Ω –æ—Ç Suno —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @version 1.0.0
 * @author Claude Code Assistant
 */

import { useState, useCallback, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { useToast } from '@/hooks/use-toast';

// ==========================================
// –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´
// ==========================================

interface MurekaGenerationRequest {
  lyrics?: string;
  title?: string;
  style?: string;
  model?: 'auto' | 'V7' | 'O1' | 'V6';
  instrumental?: boolean;
  projectId?: string;
  artistId?: string;
  inputType: 'lyrics' | 'description';
  prompt?: string;
  genre?: string;
  mood?: string;
  useInbox?: boolean;
}

interface MurekaTrack {
  id: string;
  title: string;
  lyrics: string;
  audio_url: string;
  instrumental_url?: string;
  duration: number;
  metadata: Record<string, any>;
}

interface GenerationStatus {
  id: string;
  status: 'processing' | 'completed' | 'failed';
  progress: number;
  message: string;
  tracks?: MurekaTrack[];
  error?: string;
  startTime: number;
}

interface UseMurekaGenerationReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  activeGenerations: Map<string, GenerationStatus>;
  isGenerating: boolean;
  
  // –§—É–Ω–∫—Ü–∏–∏
  generateTrack: (request: MurekaGenerationRequest) => Promise<string>;
  cancelGeneration: (generationId: string) => void;
  clearCompleted: () => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getGenerationStatus: (generationId: string) => GenerationStatus | undefined;
  getCompletedTracks: () => MurekaTrack[];
}

// ==========================================
// –û–°–ù–û–í–ù–û–ô –•–£–ö
// ==========================================

export function useMurekaGeneration(): UseMurekaGenerationReturn {
  const { user } = useAuth();
  const { toast } = useToast();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
  const [activeGenerations, setActiveGenerations] = useState<Map<string, GenerationStatus>>(new Map());
  
  // –°—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
  const abortControllers = useRef<Map<string, AbortController>>(new Map());
  
  // ====================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // ====================================
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  const updateGenerationStatus = useCallback((
    generationId: string, 
    updates: Partial<GenerationStatus>
  ) => {
    setActiveGenerations(prev => {
      const newMap = new Map(prev);
      const current = newMap.get(generationId);
      if (current) {
        newMap.set(generationId, { ...current, ...updates });
      }
      return newMap;
    });
  }, []);
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
   */
  const validateRequest = useCallback((request: MurekaGenerationRequest): void => {
    if (request.inputType === 'lyrics' && !request.lyrics?.trim()) {
      throw new Error('Lyrics are required when inputType is "lyrics"');
    }
    
    if (request.inputType === 'description' && !request.prompt?.trim()) {
      throw new Error('Prompt is required when inputType is "description"');
    }
    
    if (!user) {
      throw new Error('Authentication required');
    }
  }, [user]);
  
  /**
   * Polling —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  const pollGenerationStatus = useCallback(async (
    generationId: string,
    controller: AbortController
  ): Promise<void> => {
    const maxAttempts = 60; // 3 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 3 —Å–µ–∫—É–Ω–¥—ã
    let attempts = 0;
    
    const poll = async (): Promise<void> => {
      if (controller.signal.aborted) return;
      
      attempts++;
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: generation, error } = await supabase
          .from('ai_generations')
          .select('*')
          .eq('id', generationId)
          .single();
        
        if (error || !generation) {
          throw new Error('Generation not found');
        }
        
        const progress = Math.min(90, (attempts / maxAttempts) * 90);
        
        updateGenerationStatus(generationId, {
          status: generation.status as 'processing' | 'completed' | 'failed',
          progress,
          message: getStatusMessage(generation.status, attempts)
        });
        
        if (generation.status === 'completed') {
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
          const { data: tracks } = await supabase
            .from('tracks')
            .select('*')
            .eq('metadata->>generation_id', generationId);
          
          updateGenerationStatus(generationId, {
            status: 'completed',
            progress: 100,
            message: 'Generation completed successfully',
            tracks: (tracks || []).map(track => ({
              ...track,
              metadata: track.metadata as Record<string, any>
            })) as MurekaTrack[]
          });
          
          toast({
            title: "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description: `–°–æ–∑–¥–∞–Ω–æ ${tracks?.length || 0} —Ç—Ä–µ–∫–æ–≤`,
          });
          
          // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
          abortControllers.current.delete(generationId);
          return;
        }
        
        if (generation.status === 'failed') {
          updateGenerationStatus(generationId, {
            status: 'failed',
            progress: 0,
            message: 'Generation failed',
            error: (generation.metadata as any)?.error || 'Unknown error'
          });
          
          toast({
            title: "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            description: (generation.metadata as any)?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            variant: "destructive",
          });
          
          abortControllers.current.delete(generationId);
          return;
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º polling –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if (attempts < maxAttempts && !controller.signal.aborted) {
          setTimeout(() => poll(), 3000);
        } else if (attempts >= maxAttempts) {
          updateGenerationStatus(generationId, {
            status: 'failed',
            error: 'Generation timeout',
            message: 'Generation timed out'
          });
          
          toast({
            title: "‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ",
            description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            variant: "destructive",
          });
          
          abortControllers.current.delete(generationId);
        }
        
      } catch (error: any) {
        console.error('[POLLING] Error:', error);
        
        if (attempts >= 3) {
          updateGenerationStatus(generationId, {
            status: 'failed',
            error: error.message,
            message: 'Polling failed'
          });
          
          toast({
            title: "‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            description: error.message,
            variant: "destructive",
          });
          
          abortControllers.current.delete(generationId);
        } else {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          setTimeout(() => poll(), 3000);
        }
      }
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º polling
    poll();
  }, [updateGenerationStatus, toast, supabase]);
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  const getStatusMessage = (status: string, attempts: number): string => {
    switch (status) {
      case 'processing':
        return `Generating track... (${attempts * 3}s)`;
      case 'completed':
        return 'Generation completed';
      case 'failed':
        return 'Generation failed';
      default:
        return 'Processing...';
    }
  };
  
  // ====================================
  // –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // ====================================
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ Mureka AI
   */
  const generateTrack = useCallback(async (
    request: MurekaGenerationRequest
  ): Promise<string> => {
    
    try {
      validateRequest(request);
      
      console.log('[MUREKA] Starting generation with request:', request);
      
      const generationId = crypto.randomUUID();
      const controller = new AbortController();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
      abortControllers.current.set(generationId, controller);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
      const initialStatus: GenerationStatus = {
        id: generationId,
        status: 'processing',
        progress: 0,
        message: 'Starting generation...',
        startTime: Date.now()
      };
      
      setActiveGenerations(prev => {
        const newMap = new Map(prev);
        newMap.set(generationId, initialStatus);
        return newMap;
      });
      
      toast({
        title: "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞",
        description: "Mureka AI —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à —Ç—Ä–µ–∫...",
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º Edge Function
      const { data, error } = await supabase.functions.invoke('mureka-generate', {
        body: request
      });
      
      if (error) {
        console.error('[MUREKA] Edge function error:', error);
        throw new Error(error.message || 'Generation failed');
      }
      
      if (!data.success) {
        throw new Error(data.error || 'Unknown error');
      }
      
      console.log('[MUREKA] Edge function success:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      updateGenerationStatus(generationId, {
        progress: 10,
        message: 'Processing...'
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º polling —Å—Ç–∞—Ç—É—Å–∞
      pollGenerationStatus(generationId, controller);
      
      return generationId;
      
    } catch (error: any) {
      console.error('[MUREKA] Generation failed:', error);
      
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      });
      
      throw error;
    }
  }, [validateRequest, updateGenerationStatus, pollGenerationStatus, toast, supabase]);
  
  /**
   * –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  const cancelGeneration = useCallback((generationId: string) => {
    const controller = abortControllers.current.get(generationId);
    if (controller) {
      controller.abort();
      abortControllers.current.delete(generationId);
    }
    
    setActiveGenerations(prev => {
      const newMap = new Map(prev);
      newMap.delete(generationId);
      return newMap;
    });
    
    toast({
      title: "üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
      description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
    });
  }, [toast]);
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
   */
  const clearCompleted = useCallback(() => {
    setActiveGenerations(prev => {
      const newMap = new Map();
      for (const [id, status] of prev.entries()) {
        if (status.status === 'processing') {
          newMap.set(id, status);
        }
      }
      return newMap;
    });
  }, []);
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  const getGenerationStatus = useCallback((generationId: string): GenerationStatus | undefined => {
    return activeGenerations.get(generationId);
  }, [activeGenerations]);
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
   */
  const getCompletedTracks = useCallback((): MurekaTrack[] => {
    const tracks: MurekaTrack[] = [];
    
    for (const status of activeGenerations.values()) {
      if (status.status === 'completed' && status.tracks) {
        tracks.push(...status.tracks);
      }
    }
    
    return tracks;
  }, [activeGenerations]);
  
  // ====================================
  // –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
  // ====================================
  
  const isGenerating = activeGenerations.size > 0 && 
    Array.from(activeGenerations.values()).some(status => status.status === 'processing');
  
  // ====================================
  // –í–û–ó–í–†–ê–©–ê–ï–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
  // ====================================
  
  return {
    activeGenerations,
    isGenerating,
    generateTrack,
    cancelGeneration,
    clearCompleted,
    getGenerationStatus,
    getCompletedTracks,
  };
}